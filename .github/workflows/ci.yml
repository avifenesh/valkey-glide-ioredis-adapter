name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

# Cancel previous runs on the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test-linux:
    name: Test on Linux with Valkey Bundle (${{ matrix.arch }}, Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x64
            node: '20'
          - arch: x64
            node: '22'
          - arch: arm64
            node: '20'

    services:
      valkey-bundle:
        image: valkey/valkey-bundle:8.1-bookworm
        ports:
          - 6383:6379
        options: >-
          --health-cmd "valkey-cli -p 6379 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --memory=2g
          --cpus=2
          --ulimit nofile=65536:65536

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Wait for Valkey Bundle and verify modules
      run: |
        echo "Waiting for Valkey Bundle with modules..."
        # Install valkey-cli for testing
        sudo apt-get update && sudo apt-get install -y valkey-tools
        
        for i in {1..30}; do
          if valkey-cli -h localhost -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey Bundle is ready!"
            echo "📦 Checking loaded modules..."
            valkey-cli -h localhost -p 6383 MODULE LIST | grep -E "(json|search)" || echo "⚠️  Modules not loaded or command not available"
            echo "🔍 Testing JSON command..."
            valkey-cli -h localhost -p 6383 JSON.SET test_ci_key '$' '"test"' || echo "⚠️  JSON module not available"
            echo "🔍 Testing Search command..."
            valkey-cli -h localhost -p 6383 FT.CREATE test_ci_idx ON JSON PREFIX 1 "test:" SCHEMA name TEXT || echo "⚠️  Search module not available"
            
            echo "🔧 Configuring Valkey for testing..."
            # Optimize Valkey for testing
            valkey-cli -h localhost -p 6383 CONFIG SET maxmemory-policy allkeys-lru
            valkey-cli -h localhost -p 6383 CONFIG SET tcp-keepalive 60
            valkey-cli -h localhost -p 6383 CONFIG SET timeout 300
            valkey-cli -h localhost -p 6383 CONFIG SET save ""
            echo "✅ Valkey configured for testing"
            break
          fi
          echo "⏳ Waiting for Valkey Bundle... ($i/30)"
          sleep 2
        done

    - name: Run all tests sequentially to reduce server load
      run: |
        echo "🔍 Checking Valkey health before tests..."
        for i in {1..10}; do
          if valkey-cli -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey is healthy"
            break
          else
            echo "⚠️ Valkey not ready, waiting... ($i/10)"
            sleep 3
          fi
        done
        
        echo "🧪 Running unit tests..."
        timeout 300 npm run test:standalone -- tests/unit/ || {
          echo "⚠️ Unit tests timed out or failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        }
        
        echo "⏳ Waiting 10s to reduce server load..."
        sleep 10
        
        echo "🔍 Checking Valkey health before integration tests..."
        for i in {1..5}; do
          if valkey-cli -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey is healthy"
            break
          else
            echo "⚠️ Valkey not ready, waiting... ($i/5)"
            sleep 3
          fi
        done
        
        echo "🧪 Running integration tests..."
        timeout 300 npm run test:standalone -- tests/integration/ || {
          echo "⚠️ Integration tests timed out or failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        }
        
        echo "⏳ Waiting 10s to reduce server load..."
        sleep 10
        
        echo "🔍 Checking Valkey health before cluster tests..."
        for i in {1..5}; do
          if valkey-cli -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey is healthy"
            break
          else
            echo "⚠️ Valkey not ready, waiting... ($i/5)"
            sleep 3
          fi
        done
        
        echo "🧪 Running cluster tests..."
        timeout 300 npm run test:standalone -- tests/cluster/ || {
          echo "⚠️ Cluster tests timed out or failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        }
      env:
        CI: true
        VALKEY_HOST: localhost
        VALKEY_PORT: 6383
        VALKEY_CLUSTER_NODES: localhost:17000,localhost:17001,localhost:17002

    - name: Cleanup after tests
      if: always()
      run: |
        echo "🧹 Cleaning up after tests..."
        # Force close all Redis clients
        node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
        sleep 2
        echo "✅ Cleanup completed"

    - name: Upload coverage to Codecov
      if: matrix.node == '20'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  test-macos:
    name: Test on macOS with Valkey (core functionality, no modules)
    runs-on: macos-latest
    strategy:
      matrix:
        node: ['20', '22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install and start Valkey server
      run: |
        echo "🔑 Installing Valkey server via Homebrew..."
        
        # Install Valkey directly (available in main Homebrew formulae)
        brew install valkey
        
        # Start Valkey server with custom config suitable for testing
        valkey-server --daemonize yes \
          --port 6383 \
          --bind 127.0.0.1 \
          --save "" \
          --appendonly no \
          --maxmemory 256mb \
          --maxmemory-policy allkeys-lru \
          --loglevel notice

    - name: Wait for Valkey server
      run: |
        echo "⏳ Waiting for Valkey server to be ready..."
        
        for i in {1..20}; do
          if valkey-cli -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey server is ready!"
            echo "📋 Server info:"
            valkey-cli -p 6383 INFO server | head -5
            break
          fi
          echo "⏳ Still waiting for Valkey server... ($i/20)"
          sleep 2
        done
        
        # Final test
        valkey-cli -p 6383 ping

    - name: Run tests sequentially on macOS (no JSON/module tests)
      run: |
        echo "🧪 Running tests on macOS (no JSON/module support)"
        # Health check Valkey before tests
        echo "🔍 Checking Valkey health..."
        for i in {1..10}; do
          if valkey-cli -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey is healthy"
            break
          else
            echo "⚠️ Valkey not ready, waiting... ($i/10)"
            sleep 3
          fi
        done
        
        echo "🧪 Running unit tests (excluding JSON/module tests)..."
        # Exclude JSON and module-dependent tests
        # Use a background process with timeout for macOS
        (find tests/unit -name "*.test.mjs" ! -name "*json*" ! -name "*module*" ! -name "*search*" | xargs npm run test:standalone --) &
        TEST_PID=$!
        (sleep 300 && kill $TEST_PID 2>/dev/null) &
        TIMEOUT_PID=$!
        wait $TEST_PID
        TEST_EXIT_CODE=$?
        kill $TIMEOUT_PID 2>/dev/null
        
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "⚠️ Unit tests failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        fi
        
        echo "⏳ Waiting 15s to reduce server load..."
        sleep 15
        
        echo "🔍 Checking Valkey health before integration tests..."
        for i in {1..5}; do
          if valkey-cli -p 6383 ping > /dev/null 2>&1; then
            echo "✅ Valkey is healthy"
            break
          else
            echo "⚠️ Valkey not ready, waiting... ($i/5)"
            sleep 3
          fi
        done
        
        echo "🧪 Running basic integration tests..."
        # Use a background process with timeout for macOS
        (npm run test:standalone -- tests/integration/simple-adapter.test.mjs tests/integration/fastify-redis.test.mjs) &
        TEST_PID=$!
        (sleep 300 && kill $TEST_PID 2>/dev/null) &
        TIMEOUT_PID=$!
        wait $TEST_PID
        TEST_EXIT_CODE=$?
        kill $TIMEOUT_PID 2>/dev/null
        
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "⚠️ Integration tests failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        fi
      env:
        CI: true
        VALKEY_HOST: localhost
        VALKEY_PORT: 6383
        SKIP_MODULE_TESTS: true

    - name: Cleanup Valkey server
      if: always()
      run: |
        echo "🧹 Cleaning up Valkey server..."
        
        # Force close all Redis clients first
        echo "🔌 Force closing all Redis clients..."
        node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
        
        # Wait for cleanup
        sleep 2
        
        # Stop Valkey gracefully with timeout
        timeout 10 valkey-cli -p 6383 SHUTDOWN NOSAVE || true
        # Kill any remaining processes
        pkill valkey-server || true
        # Wait a moment for cleanup
        sleep 2
        echo "✅ Valkey cleanup completed"

  # Note: Full module testing happens on Linux, coverage upload is handled there

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run build

