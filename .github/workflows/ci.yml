name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

# Cancel previous runs on the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # Main test suite with non-docker Valkey (standalone and cluster)
  test-valkey-standalone:
    name: Test Standalone Mode (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install Valkey server directly on runner
      run: |
        echo "üîë Installing Valkey server..."
        
        # Install Valkey from official package
        curl -fsSL https://packages.valkey.io/GPG-KEY-valkey | sudo gpg --dearmor -o /usr/share/keyrings/valkey-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/valkey-archive-keyring.gpg] https://packages.valkey.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/valkey.list
        sudo apt-get update
        sudo apt-get install -y valkey
        
        # Start Valkey server for standalone tests
        valkey-server --daemonize yes \
          --port 6379 \
          --bind 127.0.0.1 \
          --save "" \
          --appendonly no \
          --maxmemory 512mb \
          --maxmemory-policy allkeys-lru \
          --loglevel notice \
          --tcp-keepalive 60 \
          --timeout 300

    - name: Wait for Valkey server
      run: |
        echo "‚è≥ Waiting for Valkey server to be ready..."
        for i in {1..30}; do
          if valkey-cli -p 6379 ping > /dev/null 2>&1; then
            echo "‚úÖ Valkey server is ready!"
            echo "üìã Server info:"
            valkey-cli -p 6379 INFO server | grep -E "(valkey_version|redis_mode)" || true
            break
          fi
          echo "‚è≥ Still waiting for Valkey server... ($i/30)"
          sleep 2
        done
        
        # Final test
        valkey-cli -p 6379 ping

    - name: Run standalone tests (excluding JSON module tests)
      run: |
        echo "üß™ Running standalone tests (no JSON/module tests)..."
        
        # Verify server health
        valkey-cli -p 6379 ping
        
        echo "üß™ Running unit tests (excluding JSON tests)..."
        # Get all test files except JSON-related ones
        UNIT_TESTS=$(find tests/unit -name "*.test.mjs" ! -name "*json*" | tr '\n' ' ')
        if [ -n "$UNIT_TESTS" ]; then
          timeout 600 ./scripts/test-runner.sh $UNIT_TESTS || {
            echo "‚ö†Ô∏è Unit tests failed, forcing cleanup..."
            node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
            exit 1
          }
        fi
        
        echo "‚è≥ Brief pause between test suites..."
        sleep 5
        
        echo "üß™ Running integration tests..."
        timeout 600 ./scripts/test-runner.sh tests/integration/ || {
          echo "‚ö†Ô∏è Integration tests failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
          exit 1
        }
      env:
        CI: true
        VALKEY_HOST: 127.0.0.1
        VALKEY_PORT: 6379
        SKIP_MODULE_TESTS: true

    - name: Cleanup Valkey server
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
        sleep 2
        sudo systemctl stop valkey || valkey-cli -p 6379 SHUTDOWN NOSAVE || pkill valkey-server || true
        echo "‚úÖ Cleanup completed"

  # Cluster test suite with non-docker Valkey
  test-valkey-cluster:
    name: Test Cluster Mode (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install Valkey and setup cluster
      run: |
        echo "üîë Installing Valkey server for cluster..."
        
        # Install Valkey from official package
        curl -fsSL https://packages.valkey.io/GPG-KEY-valkey | sudo gpg --dearmor -o /usr/share/keyrings/valkey-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/valkey-archive-keyring.gpg] https://packages.valkey.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/valkey.list
        sudo apt-get update
        sudo apt-get install -y valkey
        
        # Create cluster configuration directories
        sudo mkdir -p /etc/valkey/cluster
        
        # Start cluster nodes
        for port in 17000 17001 17002 17003 17004 17005; do
          echo "Starting cluster node on port $port..."
          valkey-server --daemonize yes \
            --port $port \
            --bind 127.0.0.1 \
            --cluster-enabled yes \
            --cluster-config-file /tmp/nodes-${port}.conf \
            --cluster-node-timeout 5000 \
            --save "" \
            --appendonly no \
            --maxmemory 256mb \
            --maxmemory-policy allkeys-lru \
            --loglevel notice
        done
        
        # Wait for nodes to start
        sleep 10
        
        # Initialize cluster
        echo "yes" | valkey-cli --cluster create \
          127.0.0.1:17000 127.0.0.1:17001 127.0.0.1:17002 \
          127.0.0.1:17003 127.0.0.1:17004 127.0.0.1:17005 \
          --cluster-replicas 1

    - name: Verify cluster setup
      run: |
        echo "üîç Verifying cluster setup..."
        
        for port in 17000 17001 17002; do
          echo "Testing node on port $port..."
          if ! valkey-cli -p $port ping > /dev/null 2>&1; then
            echo "‚ùå Node on port $port is not responding"
            exit 1
          fi
        done
        
        echo "üìã Cluster info:"
        valkey-cli -p 17000 cluster info | head -5
        echo "‚úÖ Cluster is ready!"

    - name: Run cluster tests (excluding JSON module tests)
      run: |
        echo "üß™ Running cluster tests (no JSON/module tests)..."
        
        echo "üß™ Running cluster-specific tests..."
        timeout 600 ./scripts/test-runner.sh tests/cluster/ || {
          echo "‚ö†Ô∏è Cluster tests failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
          exit 1
        }
      env:
        CI: true
        VALKEY_CLUSTER_NODES: 127.0.0.1:17000,127.0.0.1:17001,127.0.0.1:17002
        ENABLE_CLUSTER_TESTS: true
        SKIP_MODULE_TESTS: true

    - name: Cleanup cluster
      if: always()
      run: |
        echo "üßπ Cleaning up cluster..."
        node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
        sleep 2
        
        for port in 17000 17001 17002 17003 17004 17005; do
          valkey-cli -p $port SHUTDOWN NOSAVE || true
        done
        pkill valkey-server || true
        sudo rm -f /tmp/nodes-*.conf
        echo "‚úÖ Cleanup completed"

  # JSON module tests using Docker (separate job)
  test-json-modules:
    name: Test JSON Module with Valkey Bundle (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['22']

    services:
      valkey-bundle:
        image: valkey/valkey-bundle:8.1-bookworm
        ports:
          - 6383:6379
        options: >-
          --health-cmd "valkey-cli -p 6379 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --memory=2g
          --cpus=2
          --ulimit nofile=65536:65536

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Wait for Valkey Bundle and verify JSON module
      run: |
        echo "Waiting for Valkey Bundle with JSON module..."
        # Install valkey-cli for testing
        sudo apt-get update && sudo apt-get install -y valkey-tools
        
        for i in {1..30}; do
          if valkey-cli -h 127.0.0.1 -p 6383 ping > /dev/null 2>&1; then
            echo "‚úÖ Valkey Bundle is ready!"
            echo "üì¶ Checking loaded modules..."
            valkey-cli -h 127.0.0.1 -p 6383 MODULE LIST | grep -E "(json)" || echo "‚ö†Ô∏è  JSON module not loaded or command not available"
            echo "üîç Testing JSON command..."
            valkey-cli -h 127.0.0.1 -p 6383 JSON.SET test_ci_key '$' '"test"' || {
              echo "‚ùå JSON module not available - tests will fail"
              exit 1
            }
            
            echo "üîß Configuring Valkey for testing..."
            # Optimize Valkey for testing
            valkey-cli -h localhost -p 6383 CONFIG SET maxmemory-policy allkeys-lru
            valkey-cli -h localhost -p 6383 CONFIG SET tcp-keepalive 60
            valkey-cli -h localhost -p 6383 CONFIG SET timeout 300
            valkey-cli -h localhost -p 6383 CONFIG SET save ""
            echo "‚úÖ Valkey configured for testing"
            break
          fi
          echo "‚è≥ Waiting for Valkey Bundle... ($i/30)"
          sleep 2
        done

    - name: Run JSON module tests only
      run: |
        echo "üß™ Running JSON module tests..."
        
        # Verify JSON module is working
        valkey-cli -p 6383 JSON.SET verify_key '$' '"JSON module working"'
        valkey-cli -p 6383 JSON.GET verify_key
        
        echo "üß™ Running JSON-specific tests..."
        timeout 600 ./scripts/test-runner.sh tests/unit/json-commands.test.mjs || {
          echo "‚ö†Ô∏è JSON tests failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        }
      env:
        CI: true
        VALKEY_HOST: 127.0.0.1
        VALKEY_PORT: 6383
        VALKEY_BUNDLE_HOST: 127.0.0.1
        VALKEY_BUNDLE_PORT: 6383

    - name: Cleanup after JSON tests
      if: always()
      run: |
        echo "üßπ Cleaning up after JSON tests..."
        node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
        sleep 2
        echo "‚úÖ JSON test cleanup completed"

    - name: Upload coverage to Codecov
      if: matrix.node == '22'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: json-tests
        name: codecov-json-tests

  # Code quality checks
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run build

  # Optional: Test on macOS for cross-platform compatibility (core functionality only)
  test-macos:
    name: Test on macOS (core functionality, no modules)
    runs-on: macos-latest
    strategy:
      matrix:
        node: ['22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Install and start Valkey server
      run: |
        echo "üîë Installing Valkey server via Homebrew..."
        
        # Install Valkey directly (available in main Homebrew formulae)
        brew install valkey
        
        # Start Valkey server with custom config suitable for testing
        valkey-server --daemonize yes \
          --port 6379 \
          --bind 127.0.0.1 \
          --save "" \
          --appendonly no \
          --maxmemory 256mb \
          --maxmemory-policy allkeys-lru \
          --loglevel notice

    - name: Wait for Valkey server
      run: |
        echo "‚è≥ Waiting for Valkey server to be ready..."
        
        for i in {1..20}; do
          if valkey-cli -p 6379 ping > /dev/null 2>&1; then
            echo "‚úÖ Valkey server is ready!"
            echo "üìã Server info:"
            valkey-cli -p 6379 INFO server | head -5
            break
          fi
          echo "‚è≥ Still waiting for Valkey server... ($i/20)"
          sleep 2
        done
        
        # Final test
        valkey-cli -p 6379 ping

    - name: Run basic tests on macOS (no JSON/module tests)
      run: |
        echo "üß™ Running basic tests on macOS (no JSON/module support)"
        
        echo "üß™ Running core unit tests (excluding JSON/module tests)..."
        CORE_TESTS="tests/unit/string-commands.test.mjs tests/unit/hash-commands.test.mjs tests/unit/list-commands.test.mjs"
        timeout 600 ./scripts/test-runner.sh $CORE_TESTS || {
          echo "‚ö†Ô∏è Core tests failed, forcing cleanup..."
          node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})"
          exit 1
        }
      env:
        CI: true
        VALKEY_HOST: 127.0.0.1
        VALKEY_PORT: 6379
        SKIP_MODULE_TESTS: true

    - name: Cleanup Valkey server
      if: always()
      run: |
        echo "üßπ Cleaning up Valkey server..."
        node -e "import('./dist/index.js').then(pkg => pkg.default.forceCloseAllClients(1000)).catch(() => {})" || true
        sleep 2
        timeout 10 valkey-cli -p 6379 SHUTDOWN NOSAVE || pkill valkey-server || true
        echo "‚úÖ Valkey cleanup completed"
