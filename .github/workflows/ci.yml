name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test-linux:
    name: Test on Linux with Valkey Bundle (${{ matrix.arch }}, Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x64
            node: '18'
          - arch: x64
            node: '20'
          - arch: arm64
            node: '18'

    services:
      valkey-bundle:
        image: valkey/valkey-bundle:8.1-bookworm
        ports:
          - 6379:6379
        options: >-
          --health-cmd "valkey-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Wait for Valkey Bundle and verify modules
      run: |
        echo "Waiting for Valkey Bundle with modules..."
        # Install valkey-cli (native on Ubuntu 24.04)
        sudo apt-get update && sudo apt-get install -y valkey-tools
        
        for i in {1..30}; do
          if valkey-cli -h localhost -p 6379 ping > /dev/null 2>&1; then
            echo "‚úÖ Valkey Bundle is ready!"
            echo "üì¶ Checking loaded modules..."
            valkey-cli -h localhost -p 6379 INFO modules | grep -E "(json|search)" || echo "‚ö†Ô∏è  Module info not available"
            break
          fi
          echo "‚è≥ Waiting for Valkey Bundle... ($i/30)"
          sleep 2
        done

    - name: Setup Valkey Cluster for comprehensive testing
      run: |
        echo "üîß Setting up Valkey cluster for comprehensive testing..."
        # Make script executable
        chmod +x ./scripts/start-test-servers.sh
        # Start cluster (script handles Docker availability check)
        ./scripts/start-test-servers.sh --force || echo "‚ö†Ô∏è Cluster setup failed, will skip cluster tests"

    - name: Run all tests (including JSON/Search and Cluster modules)
      run: npm test
      env:
        CI: true
        VALKEY_BUNDLE_HOST: localhost
        VALKEY_BUNDLE_PORT: 6379
        ENABLE_CLUSTER_TESTS: true

    - name: Upload coverage to Codecov
      if: matrix.node == '20'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  test-macos:
    name: Test on macOS (basic Valkey only)
    runs-on: macos-latest
    strategy:
      matrix:
        node: ['18', '20']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Start Valkey server (basic)
      run: |
        # Use Redis as Valkey equivalent for macOS testing
        brew install redis
        brew services start redis

    - name: Wait for Valkey
      run: |
        for i in {1..30}; do
          if redis-cli ping > /dev/null 2>&1; then
            echo "‚úÖ Valkey is ready!"
            break
          fi
          echo "‚è≥ Waiting for Valkey... ($i/30)"
          sleep 1
        done
        redis-cli ping

    - name: Run core tests (skip module tests)
      run: npm test -- --testPathIgnorePatterns="/tests/unit/json-commands.test.ts|/tests/unit/search-commands.test.ts" --runInBand
      env:
        CI: true
        SKIP_MODULE_TESTS: true
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        VALKEY_HOST: localhost
        VALKEY_PORT: 6379

  # Note: Coverage upload is handled in the Linux job

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript check
      run: npm run build
